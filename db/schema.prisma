generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String              @id @default(dbgenerated("gen_random_uuid()"))
  clerkUserId       String              @unique
  name              String
  tsimsStudentId    Int                 @unique
  ClubRating        ClubRating[]
  ReservationRecord ReservationRecord[]
}

// -----------------------------------------
// ------------------CLUBS------------------
// -----------------------------------------
// Json types should be stored like {"zh": xxx, "en": xxx}.
// Prisma itself doesn't validates what is in that Json, we should do it by ourselves when reading.
model Club {
  id                        Int                 @id
  name                      Json // multilingual
  foundedYear               Int?
  // All of the members are recorded by tsimsStudentId
  // instead of a foreign key from the user schema for sake of simplicity when batch importing club infos
  presidentByTsimsStudentId Int // President. Only one.
  vicesByTsimsStudentId     Int[] // Vice President
  membersByTsimsStudentId   Int[] // Members
  description               Json // multilingual
  ActivityRecord            ActivityRecord[]
  ClubRating                ClubRating[]
  GroupInfo                 GroupInfo[]
  ReservationRecord         ReservationRecord[]
  ClubMembership            ClubMembership[]
}

enum ClubMemberRole {
  PRESIDENT
  VICE_PRESIDENT
  MEMBER
}

model ClubMembership {
  id             String         @id @default(dbgenerated("gen_random_uuid()"))
  tsimsStudentId Int
  name           String
  clubId         Int
  role           ClubMemberRole

  club           Club             @relation(fields: [clubId], references: [id])
  ActivityRecord ActivityRecord[]

  @@unique([tsimsStudentId, clubId]) // Ensure unique membership per club
}

// -----------------------------------------
// ---------------ACTIVITY RECORDS------------
// -----------------------------------------
//
model ActivityRecord {
  id     String   @id @default(dbgenerated("gen_random_uuid()"))
  clubId Int // Link to Club model
  date   DateTime // Start date of the leave
  text   String

  // Relations
  club      Club             @relation(fields: [clubId], references: [id])
  attendees ClubMembership[]
}

model ClubRating {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  rateBy    String // Link to User model
  clubId    Int // Link to Club model
  rating    Int      @default(0) // 0 as initial rate lol
  comment   String? // Optional comment for a rating
  ratedAt   DateTime @default(now()) // I guess we don't need this as we already have `rateScope`
  rateScope String // Identifier for the current semester, required since one can only vote once in one semester; stored as <year><a|b>, i.e., 2024a

  // Relations
  user User @relation(fields: [rateBy], references: [clerkUserId])
  club Club @relation(fields: [clubId], references: [id])

  @@unique([clubId, rateBy, rateScope]) // One student can vote only once in one semester
}

model GroupInfo {
  id                    String   @id @default(dbgenerated("gen_random_uuid()"))
  clubId                Int // Link to Club model
  wechatGroupUrl        String
  wechatGroupExpiration DateTime @default(now())

  // Relations
  club Club @relation(fields: [clubId], references: [id])

  @@unique([clubId])
}

model ClassroomData {
  id                String              @id @default(dbgenerated("gen_random_uuid()"))
  name              String              @unique
  alias             String?
  size              Int?
  ReservationRecord ReservationRecord[]
}

enum Days {
  SUNDAY
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
}

enum Periods {
  MORNING
  ONE
  TWO
  THREE
  FOUR
  NOON
  FIVE
  SIX
  SEVEN
  EIGHT
  NINE
  AFTERCLASS
}

model ReservationRecord {
  id                String        @id @default(dbgenerated("gen_random_uuid()"))
  creationTimestamp DateTime      @default(now())
  user              User          @relation(fields: [userId], references: [id])
  userId            String
  day               Days
  period            Periods
  classroom         ClassroomData @relation(fields: [classroomId], references: [id])
  classroomId       String
  club              Club          @relation(fields: [clubId], references: [id])
  clubId            Int
  note              String?

  @@unique([classroomId, day, period])
  @@unique([clubId, day, period])
}
