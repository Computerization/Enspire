generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

model User {
  id             String         @id @default(dbgenerated("gen_random_uuid()"))
  clerkUserId    String         @unique
  name           String
  tsimsStudentId Int            @unique
  LeaveRequest   LeaveRequest[]
  ClubRating     ClubRating[] 
}

// Json types should be stored like {"zh": xxx, "en": xxx}.
// Prisma itself doesn't validates what is in that Json, we should do it by ourselves when reading.
model Club {
  id                        Int            @id
  name                      Json // multilingual
  foundedYear               Int?
  // All of the members are recorded by tsimsStudentId
  // instead of a foreign key from the user schema for sake of simplicity when batch importing club infos
  presidentByTsimsStudentId Int // President. Only one.
  vicesByTsimsStudentId     Int[] // Vice President
  membersByTsimsStudentId   Int[] // Members
  description               Json // multilingual
  LeaveRequest              LeaveRequest[]
  ClubRating                ClubRating[]
}

enum LeaveRequestStatus {
  PENDING
  APPROVED
  DENIED
}

model LeaveRequest {
  id          String             @id @default(dbgenerated("gen_random_uuid()"))
  clerkUserId String // Link to User model
  clubId      Int // Link to Club model
  startDate   DateTime // Start date of the leave
  endDate     DateTime // End date of the leave. Currently we will only support request for one day, but ik somebody would want to leave for a whole fucking semester.
  reason      String
  status      LeaveRequestStatus @default(PENDING)

  // Relations
  club Club @relation(fields: [clubId], references: [id])
  user User @relation(fields: [clerkUserId], references: [clerkUserId])

  @@unique([id, clubId, startDate, endDate]) // Same user's request for a club can't overlap in time
}

model ClubRating {
  id        String        @id @default(dbgenerated("gen_random_uuid()"))
  rateBy    String // Link to User model
  clubId    Int // Link to Club model
  rating    Int           @default(0) // 0 as initial rate lol
  comment   String? // Optional comment for a rating
  ratedAt   DateTime      @default(now()) // I guess we don't need this as we already have `rateScope`
  rateScope String // Identifier for the current semester, required since one can only vote once in one semester; stored as <year><a|b>, i.e., 2024a

  // Relations
  user User @relation(fields: [rateBy], references: [clerkUserId])
  club Club @relation(fields: [clubId], references: [id])

  @@unique([id, clubId, rateBy, rateScope]) // One student can vote only once in one semester
}